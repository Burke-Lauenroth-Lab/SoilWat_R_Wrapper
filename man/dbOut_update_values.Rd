% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/OutputDatabase.R
\name{dbOut_update_values}
\alias{dbOut_update_values}
\title{Update values of \var{dbOutput} based on a new database}
\usage{
dbOut_update_values(dbOut_fname, dbNew_fname, fields_update = NULL,
  fields_exclude = NULL, verbose = FALSE)
}
\arguments{
\item{dbOut_fname}{A character string. The file path of the main
\var{\code{dbOutput}} that is to be updated.}

\item{dbNew_fname}{A character string. The file path of a database with
new values that are used to update corresponding values in
\var{\code{dbOutput}}.}

\item{fields_update}{A named list of vectors with character strings. The
field names per table to be updated. Each table is represented by a
correspondingly named element. If \code{NULL}, then all output tables,
according to \code{\link{dbOutput_ListOutputTables}}, and all fields
(except for ID-fields, i.e., \var{\code{P_id}} and \var{\code{Soil_Layer}})
are updated.}

\item{fields_exclude}{A named list of vectors with character strings. The
field names per table to be updated. Each table is represented by a
correspondingly named element. If \code{NULL}, then no fields are excluded
from the update operation.}

\item{verbose}{A logical value.}
}
\value{
Invisibly, the name of a new table that tracks which records
  (identified by \var{\code{P_id}}) have been updated (value 1) for each
  table.
}
\description{
Update values of \var{dbOutput} based on a new database
}
\examples{
\dontrun{
if (requireNamespace("RSQLite") && exists("SFSW2_prj_meta")) {
  table <- dbOut_update_values(
    dbOut_fname = SFSW2_prj_meta[["fnames_out"]][["dbOutput"]],
    dbNew_fname = "path/to/new.sqlite3",
    fields_exclude = list(
      aggregation_overall_mean = c("MAT_C_mean", "MAP_mm_mean"),
      aggregation_overall_sd = c("MAT_C_sd", "MAP_mm_sd")))

  con <- RSQLite::dbConnect(RSQLite::SQLite(),
    SFSW2_prj_meta[["fnames_out"]][["dbOutput"]])
  fields <- RSQLite::dbQuoteIdentifier(con, RSQLite::dbListFields(con, table))

  # Extract Pids from records that were updated
  sql <- paste("SELECT P_id FROM", table, "WHERE",
    paste(fields[-1], "= 1", collapse = " AND "))
  is_good <- RSQLite::dbGetQuery(con, sql)

  RSQLite::dbDisconnect(con)
}}

}
