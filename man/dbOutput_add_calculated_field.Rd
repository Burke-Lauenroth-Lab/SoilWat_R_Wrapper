% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/OutputDatabase_DataAccess.R
\name{dbOutput_add_calculated_field}
\alias{dbOutput_add_calculated_field}
\title{Add new field(s) to a table in \var{dbOutput} that is/are based on a
calculation of values from (an) existing field(s)}
\usage{
dbOutput_add_calculated_field(
  dbOut_fname,
  table,
  vars_orig,
  vars_new,
  FUN,
  ...,
  overwrite = FALSE,
  verbose = FALSE,
  chunk_size = 1e+05
)
}
\arguments{
\item{dbOut_fname}{A character string. The path to the output database.}

\item{table}{A character string. The table name to which the new field(s)
should be appended.}

\item{vars_orig}{A vector of character strings. The existing field names
that are used by \code{FUN} to calculate \code{vars_new}.}

\item{vars_new}{A vector of character strings. The names of new fields.
The number must match the number of columns returned by \code{FUN}.}

\item{FUN}{A function. See details.}

\item{...}{Additional named arguments to \code{FUN}. See details.}

\item{overwrite}{A logical value. If \code{vars_new} already exists and
\code{overwrite} is \code{TRUE}, then the content of the fields
\code{vars_new} will be replaced. If \code{vars_new} already exists and
\code{overwrite} is \code{FALSE}, then the function stops with an error.}

\item{verbose}{A logical value.}

\item{chunk_size}{An integer value.}
}
\value{
The function is called for its side-effects on \code{dbOut_fname}.
}
\description{
Add new field(s) to a table in \var{dbOutput} that is/are based on a
calculation of values from (an) existing field(s)
}
\section{Details}{
 The first argument of \code{FUN} must be a two-dimensional
  object. This object contains the extracted values from \code{dbOut_fname},
  i.e., it has up to \code{chunk_size} rows and the columns are
  \code{vars_orig}. Additional arguments can be passed via \code{...}.
  The function must return a value (or values) corresponding to
  \code{vars_new} for each row. These values are inserted into the new
  field(s).
}

\examples{
if (requireNamespace("RSQLite")) {
# Prepare database
dbOut_tmp <- tempfile(fileext = ".sqlite")
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbOut_tmp)
data(iris)
x <- data.frame(P_id = seq_len(nrow(iris)), iris)
RSQLite::dbWriteTable(con, "iris", x)
RSQLite::dbDisconnect(con)

# Define calculation function
vars_orig <- c("Sepal.Length", "Sepal.Width")
example_calc <- function(x, delta = 1, ...) {
  apply(x, MARGIN = 1, function(x) delta * prod(x))
}

# Create new field based on a calculation
dbOutput_add_calculated_field(
  dbOut_fname = dbOut_tmp,
  table = "iris",
  vars_orig = vars_orig,
  vars_new = "calc",
  FUN = example_calc, delta = 2)

# Check the new field
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbOut_tmp)
xout <- RSQLite::dbReadTable(con, "iris")
RSQLite::dbDisconnect(con)

res2 <- example_calc(x[, vars_orig], delta = 2)
all.equal(xout[, "calc"], res2)

# Cleanup
unlink(dbOut_tmp)
}

}
