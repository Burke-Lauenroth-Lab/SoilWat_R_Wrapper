% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/OutputDatabase.R
\name{dbOut_check_values}
\alias{dbOut_check_values}
\title{Check that cells of \var{dbOutput} agree with corresponding cells of another
database}
\usage{
dbOut_check_values(dbOut_fname, dbNew_fname, fields_check = NULL,
  tol = 0.001, verbose = FALSE)
}
\arguments{
\item{dbOut_fname}{A character string. The file path of the main
\var{\code{dbOutput}} that is to be updated.}

\item{dbNew_fname}{A character string. The file path of a database with
values that are to be compared against \var{\code{dbOutput}}.}

\item{fields_check}{A named list of vectors with character strings. The
field names per table that are used must have equal values in the original
and the new database for a record to be checked. If \code{NULL},
then all output tables, according to
\code{\link{dbOutput_ListOutputTables}}, and all fields
(except for ID-fields, i.e., \var{\code{P_id}} and \var{\code{Soil_Layer}})
are checked.}

\item{tol}{A numeric value. Differences smaller than tolerance are not
considered.}

\item{verbose}{A logical value.}
}
\value{
The connection to an in-memory database with one table that tracks
  which records (identified by \var{\code{P_id}}) agree (value 1) and which
  records do not agree (value 0) for each table (as field names). Value of
  records that were not compared is \code{NA}/\code{NULL}.
}
\description{
Check that cells of \var{dbOutput} agree with corresponding cells of another
database
}
\examples{
\dontrun{
  con_dbCheck <- dbOut_check_values(
    dbOut_fname = SFSW2_prj_meta[["fnames_out"]][["dbOutput"]],
    dbNew_fname = "path/to/new.sqlite3",
    fields_check = list(
      aggregation_overall_mean = c("MAT_C_mean", "MAP_mm_mean"),
      aggregation_overall_sd = c("MAT_C_sd", "MAP_mm_sd"),
    )
  )

  tables <- dbListTables(con_dbCheck)
  tables <- tables[1] # example table
  fields <- dbQuoteIdentifier(con_dbCheck, dbListFields(con_dbCheck, tables))

  # Extract Pids from records that matched up for example table
  sql <- paste("SELECT P_id FROM", tables, "WHERE",
    paste(fields[-1], "= 1", collapse = " AND "))
  is_good <- dbGetQuery(con_dbCheck, sql)

  # Extract Pids from records that did not match up; this should be empty
  sql <- paste("SELECT P_id FROM", tables, "WHERE",
    paste(fields[-1], "= 0", collapse = " OR "))
  is_bad <- dbGetQuery(con_dbCheck, sql)
}

}
